@using Contracts.Blog;
@model Comment

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@using (Html.BeginForm("Comment", "Blog", FormMethod.Post, new { @class = "column container", id = "comment-form" }))
{
    <div class="column full-width">
        <label asp-for="DisplayName"></label>
        <input asp-for="DisplayName" type="text" />
    </div>

    <div class="column full-width">
        <label asp-for="Email"></label>
        <input asp-for="Email" type="email" />
    </div>

    <div class="column full-width">
        <label asp-for="WebsiteUrl"></label>
        <input asp-for="WebsiteUrl" type="url" />
    </div>

    <div class="column full-width">
        <label asp-for="MarkdownText"></label>
        <textarea asp-for="MarkdownText"></textarea>
    </div>

    <input asp-for="PostId" hidden />
    <input type="submit" style="display:none;" />
}

<script>
        (function () {
            document.addEventListener('DOMContentLoaded', (event) => registerSearchListener(), false);
            function submitForm(formElement) {
                if (formElement.checkValidity()) {
                    var urlParameters = '';
                    for (key in formElement.elements) {
                        if (formElement.elements.hasOwnProperty(key) && isNaN(parseInt(key, 10))) {
                            if (urlParameters) {
                                urlParameters += '&';
                            }

                            urlParameters += key + '=' + encodeURIComponent(formElement.elements[key].value);
                        }
                    }

                    fetch(`/blog/comment`, { body: urlParameters, credentials: 'same-origin', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, method: 'POST' })
                        .then(response => response.text())
                        .then(html => {
                            var div = document.createElement('div');
                            div.innerHTML = html;
                            var commentsElement = document.getElementsByClassName('comments')[0];
                            commentsElement.insertBefore(div.childNodes[1], commentsElement.firstChild);
                        });
                } else {
                    formElement.querySelectorAll('input[type="submit"]')[0].click(); // forces browser validation of form
                }

            }
            function registerSearchListener() {
                document.getElementById('comment-form').addEventListener('submit', (event) => {
                    event.preventDefault();
                    submitForm(event.target);
                }, false);

                document.getElementById('MarkdownText')
                    .addEventListener('keydown', function (event) {
                        if (event.which == 13 && !event.shiftKey) {
                            var element = document.getElementById('comment-form');
                            submitForm(element);
                        }
                    });
            }
        })();
</script>