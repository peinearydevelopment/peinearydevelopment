@using Contracts;
@model ResultSet

@{ var searchTerm = string.Empty; }
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@if (Model.TotalPageCount > 0)
{
    <div class="pager full-height full-width center">
        <div class="container row">
            @if (!Model.IsOnFirstPage)
            {
                <a class="button left third-width" asp-controller="Blog" asp-action="Index" asp-route-id=@(Model.PageIndex - 1)>
                    <svg>
                        <path d="M0.75,10L6,4.5V8h13v4H6v3.5L0.75,10z" />
                    </svg>
                    Newer Posts
                </a>
            }
            else
            {
                <div class="left third-width"></div>
            }
            <div class="center third-width">
                @if (bool.TrueString == ViewData["IsTopPager"].ToString())
                {
                    <input asp-for="@searchTerm" id="searchbox" type="search" name="searchTerm" value="@searchTerm" placeholder="Search" />
                }
                else
                {
                    @Html.Raw($"Page {Model.PageIndex + 1} of {Model.TotalPageCount}")
                }
            </div>
            @if (!Model.IsOnLastPage)
                {
                <a class="button right third-width" asp-controller="Blog" asp-action="Index" asp-route-id=@(Model.PageIndex + 1)>
                    Older Posts
                    <svg>
                        <path d="M14,15.5V12H1V8h13V4.5l5.25,5.5L14,15.5z" />
                    </svg>
                </a>
            }
            else
            {
                <div class="right third-width"></div>
            }
        </div>
    </div>

    @if (bool.TrueString == ViewData["IsTopPager"].ToString())
    {
        <div id="search-results" class="container column search-results"></div>
    }
}

@if (bool.FalseString == ViewData["IsTopPager"].ToString())
{
    <script>
        (function () {
            document.addEventListener('DOMContentLoaded', (event) => registerSearchListener(), false);

            var typewatch = function () {
                var timer = 0;
                return (callback, ms) => {
                    clearTimeout(timer);
                    timer = setTimeout(callback, ms);
                }
            }();

            function registerSearchListener() {
                document.getElementById('searchbox')
                    .addEventListener('keydown', function (event) {
                        typewatch(() => search(this.value), 500);
                    });
            }

            function search(searchTerm) {
                fetch(`/blog/search?searchTerm=${searchTerm}`)
                    .then(response => response.text())
                    .then(html => {
                        console.log(html);
                        document.getElementById('search-results').innerHTML = html;
                    });
            }
        })();
    </script>
}
