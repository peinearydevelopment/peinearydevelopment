@using Contracts.Blog
@using Markdig;
@using PeinearyDevelopment;

@model Post

@{ Layout = "_Layout"; }
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@section meta {
    <meta name="description" content="@Model.MarkdownContent.Substring(0, 255)">
    <meta property="og:type" content="article">
    <meta property="og:title" content="@Model.Title">
    <meta property="og:description" content="@Model.MarkdownContent.Substring(0, 255)">
    <meta property="og:url" content="@Constants.RootBlogUrl/blog/post/@Model.Slug">


    <meta property="article:published_time" content="@Model.PostedOn.UtcDateTime.ToString("O")">
    <meta property="article:modified_time" content="@Model.PostedOn.UtcDateTime.ToString("O")"> @*add update so it can be either posted or updated date*@
    @{
        foreach (var tag in Model.Tags)
        {
            <meta property="article:tag" content="@tag.Name">
        }
    }
    <meta name="twitter:title" content="@Model.Title">
    <meta name="twitter:description" content="@Model.MarkdownContent.Substring(0, 255)">
    <meta name="twitter:url" content="@Constants.RootBlogUrl/blog/post/@Model.Slug">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="@Constants.BlogTitle">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="@string.Join(", ", Model.Tags.Select(tag => tag.Name))">
}

@section links {
    @if (Model.PreviousPost != null)
    {
        <link rel="prev" href="@Constants.RootBlogUrl/blog/post/@Model.PreviousPost.Slug">
    }
    <link rel="canonical" href="@Constants.RootBlogUrl/blog/post/@Model.Slug">
    @if (Model.NextPost != null)
    {
        <link rel="next" href="@Constants.RootBlogUrl/blog/post/@Model.NextPost.Slug">
    }
}

@section schema {
    <script type="application/ld+json">
        {
            "@@context": "http://schema.org",
            "@@type": "Article",
            "publisher": "@Constants.BlogTitle",
            "author": {
                "@@type": "Person",
                "name": "@Constants.BlogTitle"@*,
                "url": "@Constants.RootBlogUrl/author/peinearydevelopment/"*@
            },
            "headline": "@Model.Title",
            "url": "@Constants.RootBlogUrl/@Model.Slug/",
            "datePublished": "@Model.PostedOn.UtcDateTime.ToString("O")",
            "dateModified": "@Model.PostedOn.UtcDateTime.ToString("O")", @*add update so it can be either posted or updated date*@
            "keywords": "@string.Join(",", Model.Tags.Select(tag => tag.Name))",
            "description": "@Model.MarkdownContent.Substring(0, 255)"
        }
    </script>
}

@if (Model.PreviousPost != null || Model.NextPost != null)
{
    @Html.Partial("_Navigator")
}

<div class="container center column post">
    <h3 class="post-title">@Model.Title</h3>
    <div class="row tag-date-row half-width">
        <div class="tags row half-width">
            @foreach (var tag in Model.Tags)
            {
                <span class="tag">@tag.Name</span>
            }
        </div>
        @Html.Partial("_PostedOn")
    </div>
    <section class="container post-content">
        @Html.Raw(Markdown.ToHtml(Model.MarkdownContent))
    </section>

    <div class="column comments">
        @foreach (var comment in Model.Comments)
        {
            <h6>
                @if (!string.IsNullOrWhiteSpace(comment.WebsiteUrl))
                {
                    <a href="@comment.WebsiteUrl">@comment.DisplayName</a>
                }
                else
                {
                    @comment.DisplayName
                }
            </h6>
            <p>@Html.Raw(Markdown.ToHtml(comment.MarkdownText))</p>
        }
    </div>
</div>

@if (Model.PreviousPost != null || Model.NextPost != null)
{
    @Html.Partial("_Navigator")
}